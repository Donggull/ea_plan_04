/**
 * React 19 새로운 기능들을 보여주는 예시 컴포넌트
 * 개발 및 테스트 목적
 */
import { useState, useDeferredValue, useTransition, Suspense } from 'react'
import { useAuth } from '@/hooks/useAuth'
import {
  useProjectData,
  useProject,
  preloadProjectData
} from '@/hooks/useProjectData'
import {
  ReactProfiler,
  usePerformanceStats,
  usePerformanceWarnings
} from '@/lib/performance/ReactProfiler'
import {
  EnhancedLoading,
  SuspenseLoading,
  useLoadingState
} from '@/components/loading/EnhancedLoadingStates'
import {
  EnhancedErrorBoundary,
  SuspenseErrorBoundary
} from '@/components/error/EnhancedErrorBoundary'
import {
  batchUpdates,
  createOptimizedUpdater
} from '@/lib/concurrent/batchUpdates'

export function React19ShowcaseComponent() {\n  const { user } = useAuth()\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filterType, setFilterType] = useState('all')\n  const [isPending, startTransition] = useTransition()\n  const loadingState = useLoadingState()\n\n  // useDeferredValue 예시\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n  const deferredFilterType = useDeferredValue(filterType)\n\n  // 최적화된 상태 업데이트\n  const optimizedSetSearch = createOptimizedUpdater(setSearchTerm)\n\n  // 성능 모니터링\n  const performanceStats = usePerformanceStats('React19Showcase')\n  const { warnings, hasWarnings } = usePerformanceWarnings('React19Showcase')\n\n  // 검색어 변경 핸들러 (startTransition 사용)\n  const handleSearchChange = (value: string) => {\n    startTransition(() => {\n      setSearchTerm(value)\n    })\n  }\n\n  // 배치 업데이트 예시\n  const handleBatchUpdate = () => {\n    batchUpdates.addMultiple([\n      () => setSearchTerm('배치 업데이트'),\n      () => setFilterType('active'),\n      () => loadingState.setProgress(100)\n    ])\n  }\n\n  // 프로젝트 데이터 프리로딩\n  const handlePreload = () => {\n    if (user?.id) {\n      preloadProjectData.userProjects(user.id)\n      preloadProjectData.projectStats(user.id)\n    }\n  }\n\n  return (\n    <ReactProfiler id=\"React19Showcase\">\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold mb-6\">React 19 기능 쇼케이스</h1>\n\n        {/* 성능 경고 표시 */}\n        {hasWarnings && (\n          <div className=\"bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-4\">\n            <h3 className=\"font-semibold mb-2\">성능 경고:</h3>\n            <ul className=\"list-disc list-inside\">\n              {warnings.map((warning, index) => (\n                <li key={index}>{warning}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {/* Concurrent Features 데모 */}\n        <section className=\"mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Concurrent Features</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">\n                검색어 (startTransition 적용)\n              </label>\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => handleSearchChange(e.target.value)}\n                className={`w-full p-2 border rounded transition-opacity ${\n                  isPending ? 'opacity-50' : 'opacity-100'\n                }`}\n                placeholder=\"검색어를 입력하세요...\"\n              />\n              {isPending && (\n                <p className=\"text-sm text-blue-600 mt-1\">검색 중...</p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">\n                지연된 값 (useDeferredValue)\n              </label>\n              <div className=\"p-2 bg-gray-100 rounded\">\n                <p>실시간: {searchTerm || '없음'}</p>\n                <p>지연된 값: {deferredSearchTerm || '없음'}</p>\n              </div>\n            </div>\n          </div>\n\n          <button\n            onClick={handleBatchUpdate}\n            className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 mr-2\"\n          >\n            배치 업데이트 실행\n          </button>\n\n          <button\n            onClick={handlePreload}\n            className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\"\n          >\n            데이터 프리로드\n          </button>\n        </section>\n\n        {/* use() Hook 데모 */}\n        <section className=\"mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4\">use() Hook과 Suspense</h2>\n          \n          <SuspenseErrorBoundary\n            level=\"component\"\n            loadingFallback={\n              <EnhancedLoading\n                state={{ isLoading: true, message: '프로젝트 데이터를 불러오는 중...' }}\n                variant=\"skeleton\"\n              />\n            }\n          >\n            <ProjectDataDemo userId={user?.id || ''} />\n          </SuspenseErrorBoundary>\n        </section>\n\n        {/* Enhanced Loading States 데모 */}\n        <section className=\"mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Enhanced Loading States</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Spinner Loading</h3>\n              <EnhancedLoading\n                state={{ isLoading: true, message: '로딩 중...' }}\n                variant=\"spinner\"\n              />\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-2\">Skeleton Loading</h3>\n              <EnhancedLoading\n                state={{ isLoading: true }}\n                variant=\"skeleton\"\n              />\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-2\">Progress Loading</h3>\n              <EnhancedLoading\n                state={{ \n                  isLoading: true, \n                  progress: 65, \n                  message: '처리 중...' \n                }}\n                variant=\"progress\"\n              />\n            </div>\n          </div>\n        </section>\n\n        {/* 성능 통계 */}\n        {performanceStats && (\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">성능 통계</h2>\n            <div className=\"bg-gray-100 p-4 rounded\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-semibold\">총 렌더링:</span>\n                  <span className=\"ml-2\">{performanceStats.totalRenders}</span>\n                </div>\n                <div>\n                  <span className=\"font-semibold\">평균 시간:</span>\n                  <span className=\"ml-2\">{performanceStats.averageRenderTime.toFixed(2)}ms</span>\n                </div>\n                <div>\n                  <span className=\"font-semibold\">최대 시간:</span>\n                  <span className=\"ml-2\">{performanceStats.slowestRender.toFixed(2)}ms</span>\n                </div>\n                <div>\n                  <span className=\"font-semibold\">마지막 렌더링:</span>\n                  <span className=\"ml-2\">{performanceStats.lastRender.toFixed(2)}ms</span>\n                </div>\n              </div>\n            </div>\n          </section>\n        )}\n      </div>\n    </ReactProfiler>\n  )\n}\n\n// use() Hook을 사용하는 컴포넌트\nfunction ProjectDataDemo({ userId }: { userId: string }) {\n  if (!userId) {\n    return <div className=\"p-4 text-gray-500\">로그인이 필요합니다.</div>\n  }\n\n  // use() Hook 사용 - Suspense와 자동으로 통합됨\n  const { projects } = useProjectData(userId)\n\n  return (\n    <div className=\"space-y-2\">\n      <h3 className=\"font-semibold\">프로젝트 목록 (use() Hook 사용)</h3>\n      {projects && projects.length > 0 ? (\n        <ul className=\"space-y-1\">\n          {projects.slice(0, 3).map((project) => (\n            <li key={project.id} className=\"p-2 bg-gray-50 rounded\">\n              <span className=\"font-medium\">{project.title}</span>\n              <span className=\"ml-2 text-sm text-gray-600\">({project.status})</span>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className=\"text-gray-500\">프로젝트가 없습니다.</p>\n      )}\n    </div>\n  )\n}\n\n// 개발 환경에서만 표시되는 React 19 기능 가이드\nexport function React19FeatureGuide() {\n  if (process.env.NODE_ENV !== 'development') {\n    return null\n  }\n\n  return (\n    <div className=\"fixed bottom-4 left-4 bg-white shadow-lg rounded-lg p-4 max-w-sm border z-50\">\n      <h3 className=\"font-bold text-lg mb-2\">React 19 기능</h3>\n      <ul className=\"text-sm space-y-1\">\n        <li>✅ Server Components 모의 구현</li>\n        <li>✅ use() Hook 활용</li>\n        <li>✅ startTransition & useDeferredValue</li>\n        <li>✅ 자동 배치 업데이트</li>\n        <li>✅ Enhanced Suspense & Error Boundaries</li>\n        <li>✅ DevTools Profiler 통합</li>\n      </ul>\n      <p className=\"text-xs text-gray-600 mt-2\">\n        개발 환경에서만 표시됩니다.\n      </p>\n    </div>\n  )\n}"